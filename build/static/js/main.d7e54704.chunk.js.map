{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","components/Header/Header.jsx","App.js","index.js","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","components/Header/Header.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","Header","style","Box","fontWeight","App","state","fetchedData","setState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d7e54704.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react'\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core'\r\nimport CountUp from 'react-countup'\r\nimport cx from 'classnames'\r\n\r\nimport styles from './Cards.module.css'\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate }}) => {\r\n    \r\n    if(!confirmed){\r\n        return 'Loading...'\r\n    }\r\n    return(\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Infected\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                            start={0}\r\n                            end={confirmed.value}\r\n                            duration={2.5}\r\n                            separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of active cases of COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Recovered\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                            start={0}\r\n                            end={recovered.value}\r\n                            duration={2.5}\r\n                            separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of recoveries from COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Deaths\r\n                        </Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                            start={0}\r\n                            end={deaths.value}\r\n                            duration={2.5}\r\n                            separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">\r\n                            Number of deaths caused by COVID-19\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards","import axios from 'axios'\r\n\r\nconst url = 'https://covid19.mathdro.id/api'\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url\r\n\r\n    if(country) {\r\n        changeableUrl = `${url}/countries/${country}`\r\n    }\r\n    try {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl)\r\n\r\n        return { confirmed, recovered, deaths, lastUpdate }\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async() => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`)\r\n        \r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }))\r\n\r\n        return modifiedData\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const { data: { countries } } = await axios.get(`${url}/countries`)\r\n\r\n        return countries.map((country) => country.name)\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { fetchDailyData } from '../../api'\r\nimport { Line, Bar } from 'react-chartjs-2'\r\n\r\nimport styles from './Chart.module.css'\r\n\r\nconst Chart = ({ data: { confirmed, deaths, recovered}, country }) => {\r\n    const [dailyData, setDailyData] = useState([])\r\n\r\n    useEffect(() =>{\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData())\r\n        }\r\n        \r\n\r\n        fetchAPI()\r\n    }, [])\r\n\r\n    const lineChart = (\r\n        dailyData.length ?\r\n        <Line \r\n        data={{\r\n            labels: dailyData.map(({ date }) => date),\r\n            datasets: [{\r\n                data: dailyData.map(({ confirmed }) => confirmed),\r\n                label: 'Infected',\r\n                borderColor: '#3333ff',\r\n                fill: true,\r\n            }, {\r\n                data: dailyData.map(({ deaths }) => deaths),\r\n                label: 'Deaths',\r\n                borderColor: 'red',\r\n                backgroundColor: 'rgba(255,0,0,0.5)',\r\n                fill: true,\r\n            }],\r\n        }}/> : null\r\n    )\r\n\r\n        \r\n\r\n    const barChart = (\r\n        confirmed?(\r\n            <Bar \r\n            data={{\r\n                labels: ['Infected', 'Recovered', 'Deaths'],\r\n                datasets: [{\r\n                    label: 'People',\r\n                    backgroundColor: ['rgba(0,0,255,0.5)', 'rgba(0,255,0,0.5)', 'rgba(255,0,0,0.5)'],\r\n                    data: [confirmed.value, recovered.value, deaths.value]\r\n                }]\r\n            }}\r\n            options={{\r\n                legend: { display: false},\r\n                title: { display: true, text: `Current state in ${country}`}\r\n            }}/>\r\n        ) : null\r\n    )\r\n\r\n    return(\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart","import React, { useState, useEffect } from 'react'\r\nimport { NativeSelect, FormControl } from '@material-ui/core'\r\n\r\nimport styles from './CountryPicker.module.css'\r\n\r\nimport { fetchCountries } from '../../api'\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n\r\n    const [fetchedCountries, setFetchedCountries] = useState([])\r\n\r\n    useEffect(() =>{\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries())\r\n        }\r\n\r\n        fetchAPI()\r\n    }, [setFetchedCountries])\r\n\r\n    return(\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => {handleCountryChange(e.target.value)}}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker","import React from 'react'\r\n\r\nimport { Typography, Box } from '@material-ui/core'\r\n\r\nimport style from './Header.module.css'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <header>\r\n            <Typography variant=\"h1\" className={style.title}>\r\n                <Box fontWeight=\"fontWeightBold\">\r\n                COVID-19\r\n                </Box>\r\n                </Typography>\r\n        </header>\r\n    )\r\n}\r\n","import React from 'react';\n\nimport { Cards, Chart, CountryPicker, Header } from './components'\n\nimport styles from './App.module.css'\n\nimport { fetchData } from './api'\n\nclass App extends React.Component {\n\n  state = {\n    data: {},\n    country: ''\n  }\n\n  async componentDidMount(){\n    const fetchedData = await fetchData();\n\n    this.setState({ data: fetchedData })\n  }\n\n  handleCountryChange = async (country) => {\n   const fetchedData = await fetchData(country)\n   this.setState({ data: fetchedData, country: country })\n  }\n\n  render(){\n\n    const { data, country } = this.state\n\n    return(\n      <div className={styles.container}>\n        <Header />\n        <Cards data={data}/>\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country}/>\n      </div>\n    )\n  }\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Header_title__3SH2Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};"],"sourceRoot":""}